200
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139], [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]]
Creating original model: vit_base_patch16_224
Creating model: vit_base_patch16_224
Namespace(aa=None, angle_epsilon=0.18, batch_size=24, batchwise_prompt=False, clip_grad=1.0, color_jitter=None, config='cub_dualprompt', cooldown_epochs=10, data_path='./datasets/', dataset='Split-CUB200', dataset_name='cub', decay_epochs=30, decay_rate=0.1, device='cuda', dist_url='env://', distributed=False, drop=0.0, drop_path=0.0, e_prompt_layer_idx=[2, 3, 4], embedding_key='cls', epochs=50, eval=False, freeze=['blocks', 'patch_embed', 'cls_token', 'norm', 'pos_embed'], g_prompt_layer_idx=[0, 1], g_prompt_length=5, global_pool='token', head_type='token', initializer='uniform', input_size=224, length=20, lr=0.03, lr_noise=None, lr_noise_pct=0.67, lr_noise_std=1.0, mask_first_epoch=False, min_lr=1e-05, model='vit_base_patch16_224', model_num=0, momentum=0.9, nb_classes=200, no_auto=0, num_tasks=10, num_workers=4, opt='adam', opt_betas=(0.9, 0.999), opt_eps=1e-08, original_model='vit_base_patch16_224', output_dir='./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132', patience_epochs=10, pin_mem=True, predefined_key='', pretrained=True, print_freq=10, prompt_key=True, prompt_key_init='uniform', prompt_pool=True, pull_constraint=True, pull_constraint_coeff=1.0, recount=1, reinit_optimizer=True, remode='pixel', reprob=0.0, same_key_value=False, sched='step', seed=42, separated_head=False, shared_prompt_key=False, shared_prompt_pool=True, shuffle=False, size=10, smoothing=0.1, subparser_name='cub_dualprompt', task_inc=False, threshold=0.9, threshold2=0.3, threshold_pretrained=0.9, top_k=1, topk_old_subspace=3, train_interpolation='bicubic', train_mask=True, unscale_lr=True, use_e_prompt=True, use_g_prompt=True, use_old_subspace_forward=1, use_pre_gradient_constraint=1, use_prefix_tune_for_e_prompt=True, use_prefix_tune_for_g_prompt=True, use_prompt_mask=True, warmup_epochs=0, warmup_lr=1e-06, weight_decay=0.0, world_size=1)
number of params: 1098440
Start training for 50 epochs
args.config:  cub_dualprompt
>>> pretrained data exists
dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
layer 0 item key r 79
----------------------------------------
Gradient Constraints Summary (768, 79)
----------------------------------------
layer 1 item key r 38
----------------------------------------
Gradient Constraints Summary (768, 38)
----------------------------------------
layer 2 item key r 39
----------------------------------------
Gradient Constraints Summary (768, 39)
----------------------------------------
layer 3 item key r 22
----------------------------------------
Gradient Constraints Summary (768, 22)
----------------------------------------
layer 4 item key r 25
----------------------------------------
Gradient Constraints Summary (768, 25)
----------------------------------------
layer 5 item key r 34
----------------------------------------
Gradient Constraints Summary (768, 34)
----------------------------------------
layer 6 item key r 35
----------------------------------------
Gradient Constraints Summary (768, 35)
----------------------------------------
layer 7 item key r 35
----------------------------------------
Gradient Constraints Summary (768, 35)
----------------------------------------
layer 8 item key r 35
----------------------------------------
Gradient Constraints Summary (768, 35)
----------------------------------------
layer 9 item key r 35
----------------------------------------
Gradient Constraints Summary (768, 35)
----------------------------------------
layer 10 item key r 35
----------------------------------------
Gradient Constraints Summary (768, 35)
----------------------------------------
layer 11 item key r 42
----------------------------------------
Gradient Constraints Summary (768, 42)
----------------------------------------
dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
e 0 key torch.Size([768, 768])
item key
e 1 key torch.Size([768, 768])
item key
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
e 5 key torch.Size([768, 768])
item key
e 6 key torch.Size([768, 768])
item key
e 7 key torch.Size([768, 768])
item key
e 8 key torch.Size([768, 768])
item key
e 9 key torch.Size([768, 768])
item key
e 10 key torch.Size([768, 768])
item key
e 11 key torch.Size([768, 768])
item key
>>> processing on task: 0
----------------def modify_available_list----------------
>>> before modify: {}
>>> : task0
>>> after modify: {0: 0}
----------------def modify_available_list----------------
>>> : task0, no need to re-init params
>>> : task0, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 65.83851766586304
layer 0 item key r 9
----------------------------------------
Gradient Constraints Summary (768, 9)
----------------------------------------
layer 1 item key r 20
----------------------------------------
Gradient Constraints Summary (768, 20)
----------------------------------------
layer 2 item key r 27
----------------------------------------
Gradient Constraints Summary (768, 27)
----------------------------------------
layer 3 item key r 29
----------------------------------------
Gradient Constraints Summary (768, 29)
----------------------------------------
layer 4 item key r 23
----------------------------------------
Gradient Constraints Summary (768, 23)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 100.000 Acc@1 94.563 Acc@5 100.000 loss 0.248
[Average accuracy till task1]	Acc@task: 100.0000	Acc@1: 94.5631	Acc@5: 100.0000	Loss: 0.2479
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
>>> processing on task: 1
args.config:  cub_dualprompt
>>> angle list pre: {0: 80.88242918775214}
>>> angle list all: {0: 80.52749657284471}
>>> angle_epsilon:  80.88242918775214
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 0 >>> max_value 80.52749657284471
>>> min_key: 0 >>> min_value 80.52749657284471
>>> done!===========================================================================
>>> top_k_keys:  [0]
----------------def modify_available_list----------------
>>> before modify: {0: 0}
>>> : task1
>>> after modify: {0: 0, 1: 1}
----------------def modify_available_list----------------
>>> : task1, no need to re-init params
>>> : task1, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 73.64507365226746
layer 0 item key r 11
----------------------------------------
Gradient Constraints Summary (768, 11)
----------------------------------------
layer 1 item key r 20
----------------------------------------
Gradient Constraints Summary (768, 20)
----------------------------------------
layer 2 item key r 27
----------------------------------------
Gradient Constraints Summary (768, 27)
----------------------------------------
layer 3 item key r 28
----------------------------------------
Gradient Constraints Summary (768, 28)
----------------------------------------
layer 4 item key r 24
----------------------------------------
Gradient Constraints Summary (768, 24)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 83.883 Acc@1 91.845 Acc@5 99.612 loss 0.321
* Acc@task 94.087 Acc@1 83.652 Acc@5 99.304 loss 0.502
[Average accuracy till task2]	Acc@task: 88.9852	Acc@1: 87.7484	Acc@5: 99.4580	Loss: 0.4113	Forgetting: 2.7184	Backward: -2.7184
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
>>> processing on task: 2
args.config:  cub_dualprompt
>>> angle list pre: {0: 81.40093211968313, 1: 80.74898892036359}
>>> angle list all: {0: 80.6197563283948, 1: 80.60318799073113}
>>> angle_epsilon:  80.74898892036359
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 0 >>> max_value 80.6197563283948
>>> min_key: 1 >>> min_value 80.60318799073113
>>> done!===========================================================================
>>> top_k_keys:  [0, 1]
----------------def modify_available_list----------------
>>> before modify: {0: 0, 1: 1}
>>> : task2
>>> after modify: {0: 0, 1: 1, 2: 2}
----------------def modify_available_list----------------
>>> : task2, no need to re-init params
>>> : task2, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 160.51525139808655
layer 0 item key r 8
----------------------------------------
Gradient Constraints Summary (768, 8)
----------------------------------------
layer 1 item key r 18
----------------------------------------
Gradient Constraints Summary (768, 18)
----------------------------------------
layer 2 item key r 25
----------------------------------------
Gradient Constraints Summary (768, 25)
----------------------------------------
layer 3 item key r 26
----------------------------------------
Gradient Constraints Summary (768, 26)
----------------------------------------
layer 4 item key r 21
----------------------------------------
Gradient Constraints Summary (768, 21)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 77.087 Acc@1 88.350 Acc@5 99.029 loss 0.450
* Acc@task 87.826 Acc@1 74.957 Acc@5 98.609 loss 0.710
* Acc@task 80.537 Acc@1 93.121 Acc@5 98.993 loss 0.260
[Average accuracy till task3]	Acc@task: 81.8168	Acc@1: 85.4756	Acc@5: 98.8770	Loss: 0.4733	Forgetting: 7.4546	Backward: -7.4546
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
>>> processing on task: 3
args.config:  cub_dualprompt
>>> angle list pre: {0: 81.15076994075554, 1: 80.9958280144518, 2: 80.56275775088396}
>>> angle list all: {0: 80.4739387613093, 1: 80.71244718105346, 2: 81.06314966987821}
>>> angle_epsilon:  80.56275775088396
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 2 >>> max_value 81.06314966987821
>>> min_key: 0 >>> min_value 80.4739387613093
>>> done!===========================================================================
>>> top_k_keys:  [0, 1, 2]
----------------def modify_available_list----------------
>>> before modify: {0: 0, 1: 1, 2: 2}
>>> : task3
>>> after modify: {0: 0, 1: 1, 2: 3, 3: 3}
----------------def modify_available_list----------------
>>> : task3, re-init params with task2
e_prompt.prompt.grad is not None
>>> : task3, re-init keys with task2
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 66.2322769165039
----------------------------------------
Gradient Constraints Summary (768, 16)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 38)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 51)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 52)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 41)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 74.951 Acc@1 86.796 Acc@5 98.835 loss 0.464
* Acc@task 87.652 Acc@1 74.783 Acc@5 98.435 loss 0.721
* Acc@task 81.208 Acc@1 90.772 Acc@5 98.490 loss 0.331
* Acc@task 85.666 Acc@1 79.693 Acc@5 97.952 loss 0.669
[Average accuracy till task4]	Acc@task: 82.3693	Acc@1: 83.0108	Acc@5: 98.4280	Loss: 0.5466	Forgetting: 6.3285	Backward: -6.3285
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
>>> processing on task: 4
args.config:  cub_dualprompt
>>> angle list pre: {0: 81.81893606750312, 1: 81.19856956736695, 3: 81.49442618824465}
>>> angle list all: {0: 80.51854542768471, 1: 80.63526545331469, 3: 77.27002212816306}
>>> angle_epsilon:  81.49442618824465
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 1 >>> max_value 80.63526545331469
>>> min_key: 3 >>> min_value 77.27002212816306
>>> done!===========================================================================
>>> top_k_keys:  [0, 1, 3]
----------------def modify_available_list----------------
>>> before modify: {0: 0, 1: 1, 2: 3, 3: 3}
>>> : task4
>>> after modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4}
----------------def modify_available_list----------------
>>> : task4, no need to re-init params
>>> : task4, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 65.8133180141449
layer 0 item key r 13
----------------------------------------
Gradient Constraints Summary (768, 13)
----------------------------------------
layer 1 item key r 19
----------------------------------------
Gradient Constraints Summary (768, 19)
----------------------------------------
layer 2 item key r 25
----------------------------------------
Gradient Constraints Summary (768, 25)
----------------------------------------
layer 3 item key r 26
----------------------------------------
Gradient Constraints Summary (768, 26)
----------------------------------------
layer 4 item key r 19
----------------------------------------
Gradient Constraints Summary (768, 19)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 74.757 Acc@1 86.990 Acc@5 98.447 loss 0.458
* Acc@task 85.217 Acc@1 74.609 Acc@5 98.261 loss 0.753
* Acc@task 80.369 Acc@1 89.094 Acc@5 98.322 loss 0.390
* Acc@task 75.256 Acc@1 74.915 Acc@5 97.440 loss 0.773
* Acc@task 81.081 Acc@1 93.750 Acc@5 98.649 loss 0.230
[Average accuracy till task5]	Acc@task: 79.3362	Acc@1: 83.8715	Acc@5: 98.2237	Loss: 0.5210	Forgetting: 6.3553	Backward: -6.3553
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
>>> processing on task: 5
args.config:  cub_dualprompt
>>> angle list pre: {0: 81.85621873441046, 1: 81.56832867255336, 3: 81.49329133264841, 4: 81.65406404013522}
>>> angle list all: {0: 80.56152383515622, 1: 80.64734172279803, 3: 77.27052854593983, 4: 80.73542115938099}
>>> angle_epsilon:  81.65406404013522
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 4 >>> max_value 80.73542115938099
>>> min_key: 3 >>> min_value 77.27052854593983
>>> done!===========================================================================
>>> top_k_keys:  [0, 1, 3]
----------------def modify_available_list----------------
>>> before modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4}
>>> : task5
>>> after modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4, 5: 5}
----------------def modify_available_list----------------
>>> : task5, no need to re-init params
>>> : task5, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 248.28892970085144
layer 0 item key r 9
----------------------------------------
Gradient Constraints Summary (768, 9)
----------------------------------------
layer 1 item key r 16
----------------------------------------
Gradient Constraints Summary (768, 16)
----------------------------------------
layer 2 item key r 23
----------------------------------------
Gradient Constraints Summary (768, 23)
----------------------------------------
layer 3 item key r 26
----------------------------------------
Gradient Constraints Summary (768, 26)
----------------------------------------
layer 4 item key r 20
----------------------------------------
Gradient Constraints Summary (768, 20)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 73.204 Acc@1 86.214 Acc@5 98.252 loss 0.499
* Acc@task 73.565 Acc@1 69.739 Acc@5 98.087 loss 0.909
* Acc@task 79.195 Acc@1 88.423 Acc@5 98.322 loss 0.410
* Acc@task 72.184 Acc@1 74.915 Acc@5 97.440 loss 0.789
* Acc@task 73.480 Acc@1 93.412 Acc@5 98.649 loss 0.283
* Acc@task 65.548 Acc@1 86.926 Acc@5 97.173 loss 0.563
[Average accuracy till task6]	Acc@task: 72.8626	Acc@1: 83.2714	Acc@5: 97.9873	Loss: 0.5755	Forgetting: 6.4153	Backward: -6.4153
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
>>> processing on task: 6
args.config:  cub_dualprompt
>>> angle list pre: {0: 82.20793930731774, 1: 81.79321855049753, 3: 81.63431632280532, 4: 82.17644172906536, 5: 81.82286773754117}
>>> angle list all: {0: 80.75656686083683, 1: 80.55618045244833, 3: 77.05733722486347, 4: 80.58782942631824, 5: 81.2663540061204}
>>> angle_epsilon:  81.82286773754117
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 5 >>> max_value 81.2663540061204
>>> min_key: 3 >>> min_value 77.05733722486347
>>> done!===========================================================================
>>> top_k_keys:  [0, 1, 3]
----------------def modify_available_list----------------
>>> before modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4, 5: 5}
>>> : task6
>>> after modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4, 5: 5, 6: 6}
----------------def modify_available_list----------------
>>> : task6, no need to re-init params
>>> : task6, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 62.20630598068237
layer 0 item key r 10
----------------------------------------
Gradient Constraints Summary (768, 10)
----------------------------------------
layer 1 item key r 19
----------------------------------------
Gradient Constraints Summary (768, 19)
----------------------------------------
layer 2 item key r 23
----------------------------------------
Gradient Constraints Summary (768, 23)
----------------------------------------
layer 3 item key r 26
----------------------------------------
Gradient Constraints Summary (768, 26)
----------------------------------------
layer 4 item key r 18
----------------------------------------
Gradient Constraints Summary (768, 18)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 68.544 Acc@1 86.019 Acc@5 97.864 loss 0.521
* Acc@task 73.565 Acc@1 66.783 Acc@5 96.870 loss 0.999
* Acc@task 78.356 Acc@1 88.591 Acc@5 97.987 loss 0.415
* Acc@task 72.014 Acc@1 73.379 Acc@5 97.099 loss 0.817
* Acc@task 72.973 Acc@1 92.399 Acc@5 98.649 loss 0.308
* Acc@task 37.986 Acc@1 86.749 Acc@5 96.820 loss 0.597
* Acc@task 73.579 Acc@1 78.595 Acc@5 95.151 loss 0.882
[Average accuracy till task7]	Acc@task: 68.1451	Acc@1: 81.7878	Acc@5: 97.2054	Loss: 0.6484	Forgetting: 6.2976	Backward: -6.2976
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
>>> processing on task: 7
args.config:  cub_dualprompt
>>> angle list pre: {0: 81.7267591695125, 1: 81.66781095752374, 3: 81.41299753389801, 4: 81.12241842479226, 5: 81.44104489903908, 6: 81.32016594889627}
>>> angle list all: {0: 80.63437703349831, 1: 80.57752351832693, 3: 77.14114293928776, 4: 80.54042260404158, 5: 81.25811296081363, 6: 81.04277163661109}
>>> angle_epsilon:  81.32016594889627
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 5 >>> max_value 81.25811296081363
>>> min_key: 3 >>> min_value 77.14114293928776
>>> done!===========================================================================
>>> top_k_keys:  [0, 1, 3]
----------------def modify_available_list----------------
>>> before modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4, 5: 5, 6: 6}
>>> : task7
>>> after modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}
----------------def modify_available_list----------------
>>> : task7, no need to re-init params
>>> : task7, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 207.78391098976135
layer 0 item key r 6
----------------------------------------
Gradient Constraints Summary (768, 6)
----------------------------------------
layer 1 item key r 17
----------------------------------------
Gradient Constraints Summary (768, 17)
----------------------------------------
layer 2 item key r 22
----------------------------------------
Gradient Constraints Summary (768, 22)
----------------------------------------
layer 3 item key r 22
----------------------------------------
Gradient Constraints Summary (768, 22)
----------------------------------------
layer 4 item key r 16
----------------------------------------
Gradient Constraints Summary (768, 16)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 67.767 Acc@1 86.019 Acc@5 97.670 loss 0.537
* Acc@task 73.217 Acc@1 67.478 Acc@5 96.870 loss 0.989
* Acc@task 77.685 Acc@1 87.081 Acc@5 97.651 loss 0.446
* Acc@task 71.502 Acc@1 74.403 Acc@5 96.587 loss 0.850
* Acc@task 72.128 Acc@1 91.892 Acc@5 98.311 loss 0.339
* Acc@task 36.219 Acc@1 83.569 Acc@5 96.643 loss 0.664
* Acc@task 73.579 Acc@1 75.251 Acc@5 93.311 loss 0.977
* Acc@task 74.061 Acc@1 82.935 Acc@5 96.416 loss 0.712
[Average accuracy till task8]	Acc@task: 68.2698	Acc@1: 81.0785	Acc@5: 96.6824	Loss: 0.6894	Forgetting: 6.3725	Backward: -6.3725
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
>>> processing on task: 8
args.config:  cub_dualprompt
>>> angle list pre: {0: 80.49704912314971, 1: 80.6794695153393, 3: 80.50089902150958, 4: 80.61977646254178, 5: 80.57711512247953, 6: 80.4815981245424, 7: 80.73056828361374}
>>> angle list all: {0: 80.55691637089332, 1: 80.52523260901017, 3: 77.18169805812332, 4: 80.67778205200052, 5: 81.30788062366948, 6: 81.14961091933618, 7: 81.93942699712053}
>>> angle_epsilon:  80.73056828361374
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 7 >>> max_value 81.93942699712053
>>> min_key: 3 >>> min_value 77.18169805812332
>>> done!===========================================================================
>>> top_k_keys:  [0, 1, 3]
----------------def modify_available_list----------------
>>> before modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}
>>> : task8
>>> after modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4, 5: 5, 6: 6, 7: 8, 8: 8}
----------------def modify_available_list----------------
>>> : task8, re-init params with task7
e_prompt.prompt.grad is not None
>>> : task8, re-init keys with task7
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 76.63417220115662
----------------------------------------
Gradient Constraints Summary (768, 17)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 45)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 53)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 55)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 43)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 62.718 Acc@1 86.602 Acc@5 96.699 loss 0.533
* Acc@task 73.217 Acc@1 66.957 Acc@5 96.522 loss 0.985
* Acc@task 77.013 Acc@1 87.752 Acc@5 97.315 loss 0.446
* Acc@task 71.502 Acc@1 73.891 Acc@5 96.416 loss 0.832
* Acc@task 69.932 Acc@1 92.568 Acc@5 98.480 loss 0.324
* Acc@task 33.922 Acc@1 84.806 Acc@5 96.290 loss 0.647
* Acc@task 73.579 Acc@1 74.247 Acc@5 93.813 loss 1.006
* Acc@task 75.256 Acc@1 80.887 Acc@5 96.075 loss 0.751
* Acc@task 97.128 Acc@1 84.966 Acc@5 93.919 loss 0.903
[Average accuracy till task9]	Acc@task: 70.4743	Acc@1: 81.4084	Acc@5: 96.1699	Loss: 0.7141	Forgetting: 5.6908	Backward: -5.6908
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
>>> processing on task: 9
args.config:  cub_dualprompt
>>> angle list pre: {0: 81.88259241668672, 1: 82.21967008880293, 3: 82.02138304854824, 4: 82.01590041765562, 5: 82.12819171358673, 6: 81.79083563550587, 8: 81.13579708489522}
>>> angle list all: {0: 80.64179729210566, 1: 80.5691753032689, 3: 77.31749302411222, 4: 80.67077869832464, 5: 81.28264965474686, 6: 81.05442480456912, 8: 76.85261727743959}
>>> angle_epsilon:  81.13579708489522
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 5 >>> max_value 81.28264965474686
>>> min_key: 8 >>> min_value 76.85261727743959
>>> done!===========================================================================
>>> top_k_keys:  [0, 1, 3]
----------------def modify_available_list----------------
>>> before modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4, 5: 5, 6: 6, 7: 8, 8: 8}
>>> : task9
>>> after modify: {0: 0, 1: 1, 2: 3, 3: 3, 4: 4, 5: 9, 6: 6, 7: 8, 8: 8, 9: 9}
----------------def modify_available_list----------------
>>> : task9, re-init params with task5
e_prompt.prompt.grad is not None
>>> : task9, re-init keys with task5
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 50.502206802368164
----------------------------------------
Gradient Constraints Summary (768, 20)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 38)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 50)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 55)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 43)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 62.718 Acc@1 85.437 Acc@5 97.282 loss 0.539
* Acc@task 65.043 Acc@1 70.087 Acc@5 96.696 loss 0.943
* Acc@task 76.846 Acc@1 87.919 Acc@5 97.483 loss 0.453
* Acc@task 71.502 Acc@1 72.867 Acc@5 96.246 loss 0.863
* Acc@task 69.595 Acc@1 93.412 Acc@5 98.480 loss 0.334
* Acc@task 33.922 Acc@1 83.922 Acc@5 96.113 loss 0.692
* Acc@task 73.579 Acc@1 74.582 Acc@5 92.809 loss 1.013
* Acc@task 75.256 Acc@1 81.399 Acc@5 95.563 loss 0.761
* Acc@task 96.959 Acc@1 81.250 Acc@5 92.905 loss 1.019
* Acc@task 75.510 Acc@1 93.367 Acc@5 97.109 loss 0.431
[Average accuracy till task10]	Acc@task: 70.0930	Acc@1: 82.4243	Acc@5: 96.0686	Loss: 0.7047	Forgetting: 5.2584	Backward: -5.2584
NumPy array :stat_matrix saved to ./typical_setting/cub_B_0_INC_20/dualprompt/pgc_03/cub_dualprompt/test_65132/array_log.txt
Total training time: 1:36:44
