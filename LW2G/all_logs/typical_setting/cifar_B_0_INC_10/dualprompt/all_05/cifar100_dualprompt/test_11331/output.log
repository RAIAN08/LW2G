Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
100
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59], [60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [70, 71, 72, 73, 74, 75, 76, 77, 78, 79], [80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]]
Creating original model: vit_base_patch16_224
Creating model: vit_base_patch16_224
Namespace(aa=None, angle_epsilon=0.18, batch_size=24, batchwise_prompt=False, clip_grad=1.0, color_jitter=None, config='cifar100_dualprompt', cooldown_epochs=10, data_path='./datasets/', dataset='Split-CIFAR100', dataset_name='cifar100', decay_epochs=30, decay_rate=0.1, device='cuda', dist_url='env://', distributed=False, drop=0.0, drop_path=0.0, e_prompt_layer_idx=[2, 3, 4], embedding_key='cls', epochs=40, eval=False, freeze=['blocks', 'patch_embed', 'cls_token', 'norm', 'pos_embed'], g_prompt_layer_idx=[0, 1], g_prompt_length=5, global_pool='token', head_type='token', initializer='uniform', input_size=224, length=20, lr=0.03, lr_noise=None, lr_noise_pct=0.67, lr_noise_std=1.0, mask_first_epoch=False, min_lr=1e-05, model='vit_base_patch16_224', model_num=0, momentum=0.9, nb_classes=100, no_auto=0, num_tasks=10, num_workers=4, opt='adam', opt_betas=(0.9, 0.999), opt_eps=1e-08, original_model='vit_base_patch16_224', output_dir='./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331', patience_epochs=10, pin_mem=True, predefined_key='', pretrained=True, print_freq=10, prompt_key=True, prompt_key_init='uniform', prompt_pool=True, pull_constraint=True, pull_constraint_coeff=1.0, recount=1, reinit_optimizer=True, remode='pixel', reprob=0.0, same_key_value=False, sched='constant', seed=42, separated_head=False, shared_prompt_key=False, shared_prompt_pool=True, shuffle=False, size=10, smoothing=0.1, subparser_name='cifar100_dualprompt', task_inc=False, threshold=0.95, threshold2=0.5, threshold_pretrained=0.95, top_k=1, topk_old_subspace=3, train_interpolation='bicubic', train_mask=True, unscale_lr=True, use_e_prompt=True, use_g_prompt=True, use_old_subspace_forward=1, use_pre_gradient_constraint=1, use_prefix_tune_for_e_prompt=True, use_prefix_tune_for_g_prompt=True, use_prompt_mask=True, warmup_epochs=5, warmup_lr=1e-06, weight_decay=0.0, world_size=8)
number of params: 1021540
Start training for 40 epochs
args.config:  cifar100_dualprompt
>>> pretrained data exists
dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
layer 0 item key r 27
----------------------------------------
Gradient Constraints Summary (768, 27)
----------------------------------------
layer 1 item key r 84
----------------------------------------
Gradient Constraints Summary (768, 84)
----------------------------------------
layer 2 item key r 151
----------------------------------------
Gradient Constraints Summary (768, 151)
----------------------------------------
layer 3 item key r 259
----------------------------------------
Gradient Constraints Summary (768, 259)
----------------------------------------
layer 4 item key r 78
----------------------------------------
Gradient Constraints Summary (768, 78)
----------------------------------------
layer 5 item key r 72
----------------------------------------
Gradient Constraints Summary (768, 72)
----------------------------------------
layer 6 item key r 71
----------------------------------------
Gradient Constraints Summary (768, 71)
----------------------------------------
layer 7 item key r 71
----------------------------------------
Gradient Constraints Summary (768, 71)
----------------------------------------
layer 8 item key r 71
----------------------------------------
Gradient Constraints Summary (768, 71)
----------------------------------------
layer 9 item key r 71
----------------------------------------
Gradient Constraints Summary (768, 71)
----------------------------------------
layer 10 item key r 73
----------------------------------------
Gradient Constraints Summary (768, 73)
----------------------------------------
layer 11 item key r 79
----------------------------------------
Gradient Constraints Summary (768, 79)
----------------------------------------
dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
e 0 key torch.Size([768, 768])
item key
e 1 key torch.Size([768, 768])
item key
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
e 5 key torch.Size([768, 768])
item key
e 6 key torch.Size([768, 768])
item key
e 7 key torch.Size([768, 768])
item key
e 8 key torch.Size([768, 768])
item key
e 9 key torch.Size([768, 768])
item key
e 10 key torch.Size([768, 768])
item key
e 11 key torch.Size([768, 768])
item key
>>> processing on task: 0
----------------def modify_available_list----------------
>>> before modify: {}
>>> : task0
>>> after modify: {0: 0}
----------------def modify_available_list----------------
>>> : task0, no need to re-init params
>>> : task0, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 220.13640880584717
layer 0 item key r 6
----------------------------------------
Gradient Constraints Summary (768, 6)
----------------------------------------
layer 1 item key r 25
----------------------------------------
Gradient Constraints Summary (768, 25)
----------------------------------------
layer 2 item key r 38
----------------------------------------
Gradient Constraints Summary (768, 38)
----------------------------------------
layer 3 item key r 38
----------------------------------------
Gradient Constraints Summary (768, 38)
----------------------------------------
layer 4 item key r 39
----------------------------------------
Gradient Constraints Summary (768, 39)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 100.000 Acc@1 99.300 Acc@5 100.000 loss 0.046
[Average accuracy till task1]	Acc@task: 100.0000	Acc@1: 99.3000	Acc@5: 100.0000	Loss: 0.0462
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
>>> processing on task: 1
args.config:  cifar100_dualprompt
>>> angle list pre: {0: 66.68984727437034}
>>> angle list all: {0: 79.17056341456447}
>>> angle_epsilon:  66.68984727437034
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 0 >>> max_value 79.17056341456447
>>> min_key: 0 >>> min_value 79.17056341456447
>>> done!===========================================================================
>>> top_k_keys:  [0]
----------------def modify_available_list----------------
>>> before modify: {0: 0}
>>> : task1
>>> after modify: {0: 1, 1: 1}
----------------def modify_available_list----------------
>>> : task1, re-init params with task0
e_prompt.prompt.grad is not None
>>> : task1, re-init keys with task0
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 166.2667453289032
----------------------------------------
Gradient Constraints Summary (768, 17)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 55)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 78)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 77)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 79)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 100.000 Acc@1 96.700 Acc@5 100.000 loss 0.109
* Acc@task 100.000 Acc@1 96.400 Acc@5 99.800 loss 0.162
[Average accuracy till task2]	Acc@task: 100.0000	Acc@1: 96.5500	Acc@5: 99.9000	Loss: 0.1358	Forgetting: 2.6000	Backward: -2.6000
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
>>> processing on task: 2
args.config:  cifar100_dualprompt
>>> angle list pre: {1: 67.49979317432424}
>>> angle list all: {1: 74.0203910382652}
>>> angle_epsilon:  67.49979317432424
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 1 >>> max_value 74.0203910382652
>>> min_key: 1 >>> min_value 74.0203910382652
>>> done!===========================================================================
>>> top_k_keys:  [1]
----------------def modify_available_list----------------
>>> before modify: {0: 1, 1: 1}
>>> : task2
>>> after modify: {0: 2, 1: 2, 2: 2}
----------------def modify_available_list----------------
>>> : task2, re-init params with task1
e_prompt.prompt.grad is not None
>>> : task2, re-init keys with task1
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 51.2510507106781
----------------------------------------
Gradient Constraints Summary (768, 23)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 76)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 115)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 113)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 116)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 100.000 Acc@1 95.300 Acc@5 100.000 loss 0.151
* Acc@task 100.000 Acc@1 93.800 Acc@5 99.700 loss 0.234
* Acc@task 99.900 Acc@1 95.300 Acc@5 99.600 loss 0.197
[Average accuracy till task3]	Acc@task: 99.9667	Acc@1: 94.8000	Acc@5: 99.7667	Loss: 0.1940	Forgetting: 3.3000	Backward: -3.3000
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
>>> processing on task: 3
args.config:  cifar100_dualprompt
>>> angle list pre: {2: 67.21587608669971}
>>> angle list all: {2: 70.75880651900331}
>>> angle_epsilon:  67.21587608669971
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 2 >>> max_value 70.75880651900331
>>> min_key: 2 >>> min_value 70.75880651900331
>>> done!===========================================================================
>>> top_k_keys:  [2]
----------------def modify_available_list----------------
>>> before modify: {0: 2, 1: 2, 2: 2}
>>> : task3
>>> after modify: {0: 3, 1: 3, 2: 3, 3: 3}
----------------def modify_available_list----------------
>>> : task3, re-init params with task2
e_prompt.prompt.grad is not None
>>> : task3, re-init keys with task2
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 49.44387078285217
----------------------------------------
Gradient Constraints Summary (768, 31)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 103)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 154)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 151)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 155)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 100.000 Acc@1 95.200 Acc@5 100.000 loss 0.157
* Acc@task 100.000 Acc@1 88.700 Acc@5 99.300 loss 0.373
* Acc@task 99.900 Acc@1 93.400 Acc@5 98.700 loss 0.270
* Acc@task 100.000 Acc@1 92.500 Acc@5 99.200 loss 0.244
[Average accuracy till task4]	Acc@task: 99.9750	Acc@1: 92.4500	Acc@5: 99.3000	Loss: 0.2611	Forgetting: 4.5667	Backward: -4.5667
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
>>> processing on task: 4
args.config:  cifar100_dualprompt
>>> angle list pre: {3: 67.17279490436687}
>>> angle list all: {3: 67.48663340607482}
>>> angle_epsilon:  67.17279490436687
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 3 >>> max_value 67.48663340607482
>>> min_key: 3 >>> min_value 67.48663340607482
>>> done!===========================================================================
>>> top_k_keys:  [3]
----------------def modify_available_list----------------
>>> before modify: {0: 3, 1: 3, 2: 3, 3: 3}
>>> : task4
>>> after modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4}
----------------def modify_available_list----------------
>>> : task4, re-init params with task3
e_prompt.prompt.grad is not None
>>> : task4, re-init keys with task3
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 87.89594960212708
----------------------------------------
Gradient Constraints Summary (768, 38)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 125)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 189)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 186)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 192)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 100.000 Acc@1 93.200 Acc@5 100.000 loss 0.219
* Acc@task 100.000 Acc@1 87.800 Acc@5 99.400 loss 0.428
* Acc@task 99.900 Acc@1 92.600 Acc@5 98.800 loss 0.309
* Acc@task 100.000 Acc@1 91.200 Acc@5 98.700 loss 0.316
* Acc@task 100.000 Acc@1 93.700 Acc@5 99.300 loss 0.230
[Average accuracy till task5]	Acc@task: 99.9800	Acc@1: 91.7000	Acc@5: 99.2400	Loss: 0.3003	Forgetting: 4.6750	Backward: -4.6750
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
>>> processing on task: 5
args.config:  cifar100_dualprompt
>>> angle list pre: {4: 67.89946247246941}
>>> angle list all: {4: 64.95985096266136}
>>> angle_epsilon:  67.89946247246941
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 4 >>> max_value 64.95985096266136
>>> min_key: 4 >>> min_value 64.95985096266136
>>> done!===========================================================================
>>> top_k_keys:  [4]
----------------def modify_available_list----------------
>>> before modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4}
>>> : task5
>>> after modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4, 5: 5}
----------------def modify_available_list----------------
>>> : task5, no need to re-init params
>>> : task5, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 48.14547610282898
layer 0 item key r 6
----------------------------------------
Gradient Constraints Summary (768, 6)
----------------------------------------
layer 1 item key r 25
----------------------------------------
Gradient Constraints Summary (768, 25)
----------------------------------------
layer 2 item key r 37
----------------------------------------
Gradient Constraints Summary (768, 37)
----------------------------------------
layer 3 item key r 37
----------------------------------------
Gradient Constraints Summary (768, 37)
----------------------------------------
layer 4 item key r 39
----------------------------------------
Gradient Constraints Summary (768, 39)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 97.300 Acc@1 90.900 Acc@5 99.900 loss 0.269
* Acc@task 94.300 Acc@1 84.800 Acc@5 99.400 loss 0.472
* Acc@task 97.200 Acc@1 92.500 Acc@5 98.500 loss 0.327
* Acc@task 90.300 Acc@1 89.200 Acc@5 98.600 loss 0.380
* Acc@task 89.700 Acc@1 93.300 Acc@5 98.900 loss 0.262
* Acc@task 68.100 Acc@1 83.100 Acc@5 99.500 loss 0.547
[Average accuracy till task6]	Acc@task: 89.4833	Acc@1: 88.9667	Acc@5: 99.1333	Loss: 0.3761	Forgetting: 5.3000	Backward: -5.3000
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
>>> processing on task: 6
args.config:  cifar100_dualprompt
>>> angle list pre: {4: 66.3365755612354, 5: 67.45907575145752}
>>> angle list all: {4: 65.00176347177086, 5: 79.3180163847274}
>>> angle_epsilon:  67.45907575145752
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 5 >>> max_value 79.3180163847274
>>> min_key: 4 >>> min_value 65.00176347177086
>>> done!===========================================================================
>>> top_k_keys:  [4, 5]
----------------def modify_available_list----------------
>>> before modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4, 5: 5}
>>> : task6
>>> after modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4, 5: 6, 6: 6}
----------------def modify_available_list----------------
>>> : task6, re-init params with task5
e_prompt.prompt.grad is not None
>>> : task6, re-init keys with task5
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 49.27940225601196
----------------------------------------
Gradient Constraints Summary (768, 13)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 45)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 72)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 72)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 75)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 93.100 Acc@1 91.300 Acc@5 99.500 loss 0.273
* Acc@task 92.400 Acc@1 83.200 Acc@5 99.200 loss 0.512
* Acc@task 89.200 Acc@1 91.700 Acc@5 98.100 loss 0.353
* Acc@task 87.000 Acc@1 88.300 Acc@5 98.200 loss 0.390
* Acc@task 87.400 Acc@1 93.200 Acc@5 98.700 loss 0.263
* Acc@task 74.000 Acc@1 82.600 Acc@5 99.200 loss 0.596
* Acc@task 67.600 Acc@1 89.000 Acc@5 96.900 loss 0.406
[Average accuracy till task7]	Acc@task: 84.3857	Acc@1: 88.4714	Acc@5: 98.5429	Loss: 0.3990	Forgetting: 5.0000	Backward: -5.0000
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
>>> processing on task: 7
args.config:  cifar100_dualprompt
>>> angle list pre: {4: 66.190531535694, 6: 67.38244868614623}
>>> angle list all: {4: 64.8939679906663, 6: 75.04293919326601}
>>> angle_epsilon:  67.38244868614623
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 6 >>> max_value 75.04293919326601
>>> min_key: 4 >>> min_value 64.8939679906663
>>> done!===========================================================================
>>> top_k_keys:  [4, 6]
----------------def modify_available_list----------------
>>> before modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4, 5: 6, 6: 6}
>>> : task7
>>> after modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4, 5: 7, 6: 7, 7: 7}
----------------def modify_available_list----------------
>>> : task7, re-init params with task6
e_prompt.prompt.grad is not None
>>> : task7, re-init keys with task6
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 42.15131616592407
----------------------------------------
Gradient Constraints Summary (768, 20)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 65)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 106)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 107)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 112)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 90.700 Acc@1 90.200 Acc@5 99.300 loss 0.306
* Acc@task 90.400 Acc@1 83.400 Acc@5 98.500 loss 0.522
* Acc@task 83.600 Acc@1 89.900 Acc@5 98.300 loss 0.392
* Acc@task 82.400 Acc@1 88.100 Acc@5 98.100 loss 0.412
* Acc@task 83.300 Acc@1 92.900 Acc@5 98.800 loss 0.284
* Acc@task 78.700 Acc@1 81.500 Acc@5 99.100 loss 0.626
* Acc@task 71.200 Acc@1 88.000 Acc@5 97.000 loss 0.468
* Acc@task 73.600 Acc@1 90.800 Acc@5 98.100 loss 0.337
[Average accuracy till task8]	Acc@task: 81.7375	Acc@1: 88.1000	Acc@5: 98.4000	Loss: 0.4183	Forgetting: 5.0429	Backward: -5.0429
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
>>> processing on task: 8
args.config:  cifar100_dualprompt
>>> angle list pre: {4: 66.84952180856514, 7: 67.82817201885682}
>>> angle list all: {4: 64.91282043080945, 7: 71.77401625379214}
>>> angle_epsilon:  67.82817201885682
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 7 >>> max_value 71.77401625379214
>>> min_key: 4 >>> min_value 64.91282043080945
>>> done!===========================================================================
>>> top_k_keys:  [4, 7]
----------------def modify_available_list----------------
>>> before modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4, 5: 7, 6: 7, 7: 7}
>>> : task8
>>> after modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4, 5: 8, 6: 8, 7: 8, 8: 8}
----------------def modify_available_list----------------
>>> : task8, re-init params with task7
e_prompt.prompt.grad is not None
>>> : task8, re-init keys with task7
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 46.03562688827515
----------------------------------------
Gradient Constraints Summary (768, 29)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 92)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 144)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 145)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 151)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 85.400 Acc@1 90.500 Acc@5 99.100 loss 0.345
* Acc@task 82.100 Acc@1 83.800 Acc@5 98.600 loss 0.542
* Acc@task 78.800 Acc@1 89.900 Acc@5 98.200 loss 0.405
* Acc@task 78.700 Acc@1 87.200 Acc@5 97.500 loss 0.442
* Acc@task 77.800 Acc@1 90.800 Acc@5 98.500 loss 0.343
* Acc@task 82.300 Acc@1 80.600 Acc@5 99.200 loss 0.624
* Acc@task 73.400 Acc@1 85.400 Acc@5 96.200 loss 0.542
* Acc@task 75.000 Acc@1 88.600 Acc@5 97.700 loss 0.400
* Acc@task 78.900 Acc@1 92.800 Acc@5 99.600 loss 0.221
[Average accuracy till task9]	Acc@task: 79.1556	Acc@1: 87.7333	Acc@5: 98.2889	Loss: 0.4293	Forgetting: 5.4125	Backward: -5.4125
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
>>> processing on task: 9
args.config:  cifar100_dualprompt
>>> angle list pre: {4: 65.99916228634027, 8: 67.30551162510415}
>>> angle list all: {4: 64.91163067689438, 8: 68.4324936389719}
>>> angle_epsilon:  67.30551162510415
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 8 >>> max_value 68.4324936389719
>>> min_key: 4 >>> min_value 64.91163067689438
>>> done!===========================================================================
>>> top_k_keys:  [4, 8]
----------------def modify_available_list----------------
>>> before modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4, 5: 8, 6: 8, 7: 8, 8: 8}
>>> : task9
>>> after modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4, 5: 9, 6: 9, 7: 9, 8: 9, 9: 9}
----------------def modify_available_list----------------
>>> : task9, re-init params with task8
e_prompt.prompt.grad is not None
>>> : task9, re-init keys with task8
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 59.6980721950531
----------------------------------------
Gradient Constraints Summary (768, 35)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 113)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 180)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 181)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 187)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 84.700 Acc@1 90.600 Acc@5 98.900 loss 0.330
* Acc@task 81.000 Acc@1 81.800 Acc@5 98.400 loss 0.585
* Acc@task 78.200 Acc@1 89.300 Acc@5 98.400 loss 0.408
* Acc@task 76.200 Acc@1 85.400 Acc@5 97.500 loss 0.497
* Acc@task 76.200 Acc@1 90.100 Acc@5 98.500 loss 0.372
* Acc@task 82.300 Acc@1 79.000 Acc@5 99.200 loss 0.726
* Acc@task 74.000 Acc@1 84.100 Acc@5 95.500 loss 0.616
* Acc@task 76.000 Acc@1 88.200 Acc@5 97.300 loss 0.445
* Acc@task 79.000 Acc@1 90.100 Acc@5 99.200 loss 0.337
* Acc@task 75.700 Acc@1 90.000 Acc@5 99.700 loss 0.339
[Average accuracy till task10]	Acc@task: 78.3300	Acc@1: 86.8600	Acc@5: 98.2600	Loss: 0.4655	Forgetting: 6.0333	Backward: -6.0333
NumPy array :stat_matrix saved to ./typical_setting/cifar_B_0_INC_10/dualprompt/all_05/cifar100_dualprompt/test_11331/array_log.txt
Total training time: 4:55:32
