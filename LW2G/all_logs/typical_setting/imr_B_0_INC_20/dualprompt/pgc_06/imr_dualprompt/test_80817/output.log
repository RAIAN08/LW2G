Downloading from https://people.eecs.berkeley.edu/~hendrycks/imagenet-r.tar
Using downloaded and verified file: ./datasets/imagenet-r.tar
Downloading from https://people.eecs.berkeley.edu/~hendrycks/imagenet-r.tar
Using downloaded and verified file: ./datasets/imagenet-r.tar
Downloading from https://people.eecs.berkeley.edu/~hendrycks/imagenet-r.tar
Using downloaded and verified file: ./datasets/imagenet-r.tar
Downloading from https://people.eecs.berkeley.edu/~hendrycks/imagenet-r.tar
Using downloaded and verified file: ./datasets/imagenet-r.tar
200
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139], [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]]
Creating original model: vit_base_patch16_224
Creating model: vit_base_patch16_224
Namespace(aa=None, angle_epsilon=0.18, batch_size=24, batchwise_prompt=False, clip_grad=1.0, color_jitter=None, config='imr_dualprompt', cooldown_epochs=10, data_path='./datasets/', dataset='Split-Imagenet-R', dataset_name='imr', decay_epochs=30, decay_rate=0.1, device='cuda', dist_url='env://', distributed=False, drop=0.0, drop_path=0.0, e_prompt_layer_idx=[2, 3, 4], embedding_key='cls', epochs=50, eval=False, freeze=['blocks', 'patch_embed', 'cls_token', 'norm', 'pos_embed'], g_prompt_layer_idx=[0, 1], g_prompt_length=5, global_pool='token', head_type='token', initializer='uniform', input_size=224, length=20, lr=0.005, lr_noise=None, lr_noise_pct=0.67, lr_noise_std=1.0, mask_first_epoch=False, min_lr=1e-05, model='vit_base_patch16_224', model_num=0, momentum=0.9, nb_classes=200, no_auto=0, num_tasks=10, num_workers=4, opt='adam', opt_betas=(0.9, 0.999), opt_eps=1e-08, original_model='vit_base_patch16_224', output_dir='./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817', patience_epochs=10, pin_mem=True, predefined_key='', pretrained=True, print_freq=10, prompt_key=True, prompt_key_init='uniform', prompt_pool=True, pull_constraint=True, pull_constraint_coeff=1.0, recount=1, reinit_optimizer=True, remode='pixel', reprob=0.0, same_key_value=False, sched='constant', seed=42, separated_head=False, shared_prompt_key=False, shared_prompt_pool=True, shuffle=False, size=10, smoothing=0.1, subparser_name='imr_dualprompt', task_inc=False, threshold=0.99, threshold2=0.6, threshold_pretrained=0.99, top_k=1, topk_old_subspace=3, train_interpolation='bicubic', train_mask=True, unscale_lr=True, use_e_prompt=True, use_g_prompt=True, use_old_subspace_forward=1, use_pre_gradient_constraint=1, use_prefix_tune_for_e_prompt=True, use_prefix_tune_for_g_prompt=True, use_prompt_mask=True, warmup_epochs=5, warmup_lr=1e-06, weight_decay=0.0, world_size=4)
number of params: 1098440
Start training for 50 epochs
args.config:  imr_dualprompt
>>> pretrained data exists
dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
layer 0 item key r 578
----------------------------------------
Gradient Constraints Summary (768, 578)
----------------------------------------
layer 1 item key r 517
----------------------------------------
Gradient Constraints Summary (768, 517)
----------------------------------------
layer 2 item key r 486
----------------------------------------
Gradient Constraints Summary (768, 486)
----------------------------------------
layer 3 item key r 380
----------------------------------------
Gradient Constraints Summary (768, 380)
----------------------------------------
layer 4 item key r 89
----------------------------------------
Gradient Constraints Summary (768, 89)
----------------------------------------
layer 5 item key r 104
----------------------------------------
Gradient Constraints Summary (768, 104)
----------------------------------------
layer 6 item key r 105
----------------------------------------
Gradient Constraints Summary (768, 105)
----------------------------------------
layer 7 item key r 105
----------------------------------------
Gradient Constraints Summary (768, 105)
----------------------------------------
layer 8 item key r 105
----------------------------------------
Gradient Constraints Summary (768, 105)
----------------------------------------
layer 9 item key r 105
----------------------------------------
Gradient Constraints Summary (768, 105)
----------------------------------------
layer 10 item key r 106
----------------------------------------
Gradient Constraints Summary (768, 106)
----------------------------------------
layer 11 item key r 117
----------------------------------------
Gradient Constraints Summary (768, 117)
----------------------------------------
dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
e 0 key torch.Size([768, 768])
item key
e 1 key torch.Size([768, 768])
item key
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
e 5 key torch.Size([768, 768])
item key
e 6 key torch.Size([768, 768])
item key
e 7 key torch.Size([768, 768])
item key
e 8 key torch.Size([768, 768])
item key
e 9 key torch.Size([768, 768])
item key
e 10 key torch.Size([768, 768])
item key
e 11 key torch.Size([768, 768])
item key
>>> processing on task: 0
----------------def modify_available_list----------------
>>> before modify: {}
>>> : task0
>>> after modify: {0: 0}
----------------def modify_available_list----------------
>>> : task0, no need to re-init params
>>> : task0, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 57.63730049133301
layer 0 item key r 40
----------------------------------------
Gradient Constraints Summary (768, 40)
----------------------------------------
layer 1 item key r 44
----------------------------------------
Gradient Constraints Summary (768, 44)
----------------------------------------
layer 2 item key r 47
----------------------------------------
Gradient Constraints Summary (768, 47)
----------------------------------------
layer 3 item key r 46
----------------------------------------
Gradient Constraints Summary (768, 46)
----------------------------------------
layer 4 item key r 46
----------------------------------------
Gradient Constraints Summary (768, 46)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 99.730 Acc@1 71.159 Acc@5 92.183 loss 1.843
[Average accuracy till task1]	Acc@task: 99.7305	Acc@1: 71.1590	Acc@5: 92.1833	Loss: 1.8434
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
>>> processing on task: 1
args.config:  imr_dualprompt
>>> angle list pre: {0: 49.77848761036587}
>>> angle list all: {0: 76.10786957203754}
>>> angle_epsilon:  49.77848761036587
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 0 >>> max_value 76.10786957203754
>>> min_key: 0 >>> min_value 76.10786957203754
>>> done!===========================================================================
>>> top_k_keys:  [0]
----------------def modify_available_list----------------
>>> before modify: {0: 0}
>>> : task1
>>> after modify: {0: 1, 1: 1}
----------------def modify_available_list----------------
>>> : task1, re-init params with task0
e_prompt.prompt.grad is not None
>>> : task1, re-init keys with task0
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 58.59272265434265
----------------------------------------
Gradient Constraints Summary (768, 80)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 89)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 94)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 94)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 93)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 99.730 Acc@1 71.159 Acc@5 89.757 loss 1.636
* Acc@task 100.000 Acc@1 76.638 Acc@5 92.308 loss 1.443
[Average accuracy till task2]	Acc@task: 99.8652	Acc@1: 73.8986	Acc@5: 91.0326	Loss: 1.5398	Forgetting: 0.0000	Backward: -0.0000
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
>>> processing on task: 2
args.config:  imr_dualprompt
>>> angle list pre: {1: 49.200927150357266}
>>> angle list all: {1: 69.78518947588495}
>>> angle_epsilon:  49.200927150357266
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 1 >>> max_value 69.78518947588495
>>> min_key: 1 >>> min_value 69.78518947588495
>>> done!===========================================================================
>>> top_k_keys:  [1]
----------------def modify_available_list----------------
>>> before modify: {0: 1, 1: 1}
>>> : task2
>>> after modify: {0: 2, 1: 2, 2: 2}
----------------def modify_available_list----------------
>>> : task2, re-init params with task1
e_prompt.prompt.grad is not None
>>> : task2, re-init keys with task1
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 185.16357111930847
----------------------------------------
Gradient Constraints Summary (768, 123)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 134)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 141)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 141)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 139)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 99.730 Acc@1 69.272 Acc@5 87.871 loss 1.739
* Acc@task 100.000 Acc@1 77.493 Acc@5 90.313 loss 1.485
* Acc@task 100.000 Acc@1 76.699 Acc@5 91.262 loss 1.379
[Average accuracy till task3]	Acc@task: 99.9102	Acc@1: 74.4881	Acc@5: 89.8154	Loss: 1.5343	Forgetting: 0.9434	Backward: -0.5160
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
>>> processing on task: 3
args.config:  imr_dualprompt
>>> angle list pre: {2: 48.505619373863986}
>>> angle list all: {2: 64.919101363787}
>>> angle_epsilon:  48.505619373863986
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 2 >>> max_value 64.919101363787
>>> min_key: 2 >>> min_value 64.919101363787
>>> done!===========================================================================
>>> top_k_keys:  [2]
----------------def modify_available_list----------------
>>> before modify: {0: 2, 1: 2, 2: 2}
>>> : task3
>>> after modify: {0: 3, 1: 3, 2: 3, 3: 3}
----------------def modify_available_list----------------
>>> : task3, re-init params with task2
e_prompt.prompt.grad is not None
>>> : task3, re-init keys with task2
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 54.486191511154175
----------------------------------------
Gradient Constraints Summary (768, 164)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 178)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 188)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 188)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 185)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 99.730 Acc@1 66.307 Acc@5 85.445 loss 1.758
* Acc@task 100.000 Acc@1 72.650 Acc@5 88.319 loss 1.557
* Acc@task 100.000 Acc@1 75.728 Acc@5 89.320 loss 1.360
* Acc@task 99.698 Acc@1 73.112 Acc@5 92.447 loss 1.398
[Average accuracy till task4]	Acc@task: 99.8571	Acc@1: 71.9492	Acc@5: 88.8828	Loss: 1.5184	Forgetting: 3.5553	Backward: -3.2704
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
>>> processing on task: 4
args.config:  imr_dualprompt
>>> angle list pre: {3: 47.08391393529319}
>>> angle list all: {3: 60.85403344446831}
>>> angle_epsilon:  47.08391393529319
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 3 >>> max_value 60.85403344446831
>>> min_key: 3 >>> min_value 60.85403344446831
>>> done!===========================================================================
>>> top_k_keys:  [3]
----------------def modify_available_list----------------
>>> before modify: {0: 3, 1: 3, 2: 3, 3: 3}
>>> : task4
>>> after modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4}
----------------def modify_available_list----------------
>>> : task4, re-init params with task3
e_prompt.prompt.grad is not None
>>> : task4, re-init keys with task3
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 215.42046070098877
----------------------------------------
Gradient Constraints Summary (768, 203)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 220)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 234)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 235)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 231)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 99.730 Acc@1 68.464 Acc@5 87.062 loss 1.612
* Acc@task 100.000 Acc@1 72.080 Acc@5 89.459 loss 1.448
* Acc@task 100.000 Acc@1 72.330 Acc@5 88.835 loss 1.442
* Acc@task 100.000 Acc@1 69.184 Acc@5 90.332 loss 1.481
* Acc@task 100.000 Acc@1 72.055 Acc@5 89.041 loss 1.447
[Average accuracy till task5]	Acc@task: 99.9461	Acc@1: 70.8225	Acc@5: 88.9458	Loss: 1.4860	Forgetting: 4.1012	Backward: -3.8876
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
>>> processing on task: 5
args.config:  imr_dualprompt
>>> angle list pre: {4: 47.225677134209995}
>>> angle list all: {4: 57.15070043025266}
>>> angle_epsilon:  47.225677134209995
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 4 >>> max_value 57.15070043025266
>>> min_key: 4 >>> min_value 57.15070043025266
>>> done!===========================================================================
>>> top_k_keys:  [4]
----------------def modify_available_list----------------
>>> before modify: {0: 4, 1: 4, 2: 4, 3: 4, 4: 4}
>>> : task5
>>> after modify: {0: 5, 1: 5, 2: 5, 3: 5, 4: 5, 5: 5}
----------------def modify_available_list----------------
>>> : task5, re-init params with task4
e_prompt.prompt.grad is not None
>>> : task5, re-init keys with task4
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 98.94890522956848
----------------------------------------
Gradient Constraints Summary (768, 241)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 262)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 280)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 282)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 276)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 99.730 Acc@1 66.846 Acc@5 85.984 loss 1.667
* Acc@task 100.000 Acc@1 71.225 Acc@5 88.889 loss 1.460
* Acc@task 100.000 Acc@1 70.388 Acc@5 89.320 loss 1.487
* Acc@task 100.000 Acc@1 67.674 Acc@5 88.520 loss 1.515
* Acc@task 100.000 Acc@1 70.685 Acc@5 89.315 loss 1.475
* Acc@task 100.000 Acc@1 73.090 Acc@5 90.365 loss 1.462
[Average accuracy till task6]	Acc@task: 99.9551	Acc@1: 69.9847	Acc@5: 88.7322	Loss: 1.5110	Forgetting: 4.7398	Backward: -4.5689
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
>>> processing on task: 6
args.config:  imr_dualprompt
>>> angle list pre: {5: 48.15147265850045}
>>> angle list all: {5: 53.65908193050142}
>>> angle_epsilon:  48.15147265850045
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 5 >>> max_value 53.65908193050142
>>> min_key: 5 >>> min_value 53.65908193050142
>>> done!===========================================================================
>>> top_k_keys:  [5]
----------------def modify_available_list----------------
>>> before modify: {0: 5, 1: 5, 2: 5, 3: 5, 4: 5, 5: 5}
>>> : task6
>>> after modify: {0: 6, 1: 6, 2: 6, 3: 6, 4: 6, 5: 6, 6: 6}
----------------def modify_available_list----------------
>>> : task6, re-init params with task5
e_prompt.prompt.grad is not None
>>> : task6, re-init keys with task5
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 69.17040371894836
----------------------------------------
Gradient Constraints Summary (768, 276)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 302)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 325)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 328)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 320)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 100.000 Acc@1 66.846 Acc@5 84.906 loss 1.680
* Acc@task 100.000 Acc@1 69.801 Acc@5 88.889 loss 1.492
* Acc@task 100.000 Acc@1 70.388 Acc@5 87.864 loss 1.563
* Acc@task 100.000 Acc@1 66.163 Acc@5 86.405 loss 1.602
* Acc@task 100.000 Acc@1 66.301 Acc@5 86.301 loss 1.604
* Acc@task 100.000 Acc@1 72.093 Acc@5 89.701 loss 1.537
* Acc@task 100.000 Acc@1 70.707 Acc@5 85.522 loss 1.680
[Average accuracy till task7]	Acc@task: 100.0000	Acc@1: 68.9000	Acc@5: 87.0840	Loss: 1.5940	Forgetting: 5.3357	Backward: -5.1933
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
>>> processing on task: 7
args.config:  imr_dualprompt
>>> angle list pre: {6: 47.58662195279336}
>>> angle list all: {6: 50.618284493245376}
>>> angle_epsilon:  47.58662195279336
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 6 >>> max_value 50.618284493245376
>>> min_key: 6 >>> min_value 50.618284493245376
>>> done!===========================================================================
>>> top_k_keys:  [6]
----------------def modify_available_list----------------
>>> before modify: {0: 6, 1: 6, 2: 6, 3: 6, 4: 6, 5: 6, 6: 6}
>>> : task7
>>> after modify: {0: 7, 1: 7, 2: 7, 3: 7, 4: 7, 5: 7, 6: 7, 7: 7}
----------------def modify_available_list----------------
>>> : task7, re-init params with task6
e_prompt.prompt.grad is not None
>>> : task7, re-init keys with task6
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 49.56859040260315
----------------------------------------
Gradient Constraints Summary (768, 311)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 340)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 369)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 372)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 363)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 100.000 Acc@1 66.846 Acc@5 84.097 loss 1.713
* Acc@task 100.000 Acc@1 68.661 Acc@5 85.755 loss 1.542
* Acc@task 100.000 Acc@1 67.961 Acc@5 87.379 loss 1.587
* Acc@task 100.000 Acc@1 64.350 Acc@5 84.592 loss 1.656
* Acc@task 100.000 Acc@1 66.027 Acc@5 84.658 loss 1.655
* Acc@task 100.000 Acc@1 70.100 Acc@5 87.708 loss 1.590
* Acc@task 100.000 Acc@1 69.360 Acc@5 85.185 loss 1.675
* Acc@task 100.000 Acc@1 64.394 Acc@5 83.712 loss 1.845
[Average accuracy till task8]	Acc@task: 100.0000	Acc@1: 67.2125	Acc@5: 85.3857	Loss: 1.6577	Forgetting: 5.8583	Backward: -5.7362
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
>>> processing on task: 8
args.config:  imr_dualprompt
>>> angle list pre: {7: 48.63024726763425}
>>> angle list all: {7: 47.46514131276613}
>>> angle_epsilon:  48.63024726763425
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 7 >>> max_value 47.46514131276613
>>> min_key: 7 >>> min_value 47.46514131276613
>>> done!===========================================================================
>>> top_k_keys:  [7]
----------------def modify_available_list----------------
>>> before modify: {0: 7, 1: 7, 2: 7, 3: 7, 4: 7, 5: 7, 6: 7, 7: 7}
>>> : task8
>>> after modify: {0: 7, 1: 7, 2: 7, 3: 7, 4: 7, 5: 7, 6: 7, 7: 7, 8: 8}
----------------def modify_available_list----------------
>>> : task8, no need to re-init params
>>> : task8, no need to re-init keys
>>> : need to build memory
get_prefix_matrix use: 47.00494122505188
layer 0 item key r 40
----------------------------------------
Gradient Constraints Summary (768, 40)
----------------------------------------
layer 1 item key r 44
----------------------------------------
Gradient Constraints Summary (768, 44)
----------------------------------------
layer 2 item key r 46
----------------------------------------
Gradient Constraints Summary (768, 46)
----------------------------------------
layer 3 item key r 47
----------------------------------------
Gradient Constraints Summary (768, 47)
----------------------------------------
layer 4 item key r 46
----------------------------------------
Gradient Constraints Summary (768, 46)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 99.461 Acc@1 66.038 Acc@5 83.558 loss 1.743
* Acc@task 98.575 Acc@1 68.946 Acc@5 84.330 loss 1.575
* Acc@task 100.000 Acc@1 66.990 Acc@5 87.379 loss 1.601
* Acc@task 100.000 Acc@1 63.746 Acc@5 85.498 loss 1.668
* Acc@task 97.260 Acc@1 63.836 Acc@5 83.562 loss 1.725
* Acc@task 93.355 Acc@1 67.110 Acc@5 86.379 loss 1.637
* Acc@task 92.593 Acc@1 64.983 Acc@5 84.512 loss 1.769
* Acc@task 87.879 Acc@1 60.227 Acc@5 82.197 loss 1.923
* Acc@task 42.105 Acc@1 75.987 Acc@5 88.487 loss 1.322
[Average accuracy till task9]	Acc@task: 90.1365	Acc@1: 66.4292	Acc@5: 85.1002	Loss: 1.6626	Forgetting: 7.1041	Backward: -6.9972
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
>>> processing on task: 9
args.config:  imr_dualprompt
>>> angle list pre: {7: 49.08334777479875, 8: 48.19091151605814}
>>> angle list all: {7: 47.46574916006346, 8: 76.19306929841208}
>>> angle_epsilon:  48.19091151605814
>>> all angle list:=================================================================
>>> done!===========================================================================
>>> max_key: 8 >>> max_value 76.19306929841208
>>> min_key: 7 >>> min_value 47.46574916006346
>>> done!===========================================================================
>>> top_k_keys:  [7, 8]
----------------def modify_available_list----------------
>>> before modify: {0: 7, 1: 7, 2: 7, 3: 7, 4: 7, 5: 7, 6: 7, 7: 7, 8: 8}
>>> : task9
>>> after modify: {0: 7, 1: 7, 2: 7, 3: 7, 4: 7, 5: 7, 6: 7, 7: 7, 8: 9, 9: 9}
----------------def modify_available_list----------------
>>> : task9, re-init params with task8
e_prompt.prompt.grad is not None
>>> : task9, re-init keys with task8
e_prompt.prompt.grad is not None
>>> : need to build memory
get_prefix_matrix use: 55.45907759666443
----------------------------------------
Gradient Constraints Summary (768, 79)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 87)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 93)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 94)
----------------------------------------
----------------------------------------
Gradient Constraints Summary (768, 92)
----------------------------------------
g 0 key torch.Size([768, 768])
g 1 key torch.Size([768, 768])
e 2 key torch.Size([768, 768])
item key
e 3 key torch.Size([768, 768])
item key
e 4 key torch.Size([768, 768])
item key
* Acc@task 86.253 Acc@1 65.229 Acc@5 82.480 loss 1.816
* Acc@task 85.470 Acc@1 69.516 Acc@5 83.476 loss 1.649
* Acc@task 97.573 Acc@1 66.505 Acc@5 87.379 loss 1.631
* Acc@task 92.145 Acc@1 62.236 Acc@5 81.873 loss 1.758
* Acc@task 81.096 Acc@1 60.274 Acc@5 80.548 loss 1.837
* Acc@task 78.738 Acc@1 64.784 Acc@5 85.382 loss 1.715
* Acc@task 78.451 Acc@1 60.943 Acc@5 79.125 loss 1.914
* Acc@task 78.788 Acc@1 59.091 Acc@5 79.924 loss 2.000
* Acc@task 57.566 Acc@1 75.987 Acc@5 87.500 loss 1.336
* Acc@task 67.857 Acc@1 71.429 Acc@5 84.524 loss 1.630
[Average accuracy till task10]	Acc@task: 80.3937	Acc@1: 65.5992	Acc@5: 83.2210	Loss: 1.7286	Forgetting: 7.7924	Backward: -7.6974
NumPy array :stat_matrix saved to ./typical_setting/imr_B_0_INC_20/dualprompt/pgc_06/imr_dualprompt/test_80817/array_log.txt
Total training time: 1:49:35
